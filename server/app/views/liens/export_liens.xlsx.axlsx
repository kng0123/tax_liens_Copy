max_number_receipt = 0
max_number_subs = 0
@liens.each do |lien|
  num_receipts = lien.receipts.count
  if num_receipts > max_number_receipt
    max_number_receipt = num_receipts
  end

  num_subs = lien.subsequents.count
  if num_subs > max_number_subs
    max_number_subs = num_subs
  end
end

info_header = [
  "Unique ID", "County", "Year", "LLC", "Block/Lot", "Block", "Lot",
  "Qualifier", "Adv #", "MUA Acct # / Parcel ID", "Cert #", "Lien Type",
  "List Item", "Current Owner", "Longitude", "Latitude", "Assessed Value",
  "Tax Amount", "Status", "Address", "Cert FV", "Winning Bid","Premium",
  "Total Paid","Sale Date",

  "Recording Fee", "Recording Date", "Search fee", "Year end penalty", "Flat rate", "Cert int"
]
sub_header = ["Sub Type", "Sub Date", "Interest", "8%", "18%", "Check", "Total", "Notes"]

sub_sum_header = [
  "Total subs paid",
  "Total Cash Out",
  "Total cash received", "Total principal paid",  "Total actual interest", "Total legal fees", "Principal balance"
]
receipt_header = [
  "Deposit Date", "Check Date", "Redemption Date", "Account", "Check #", "Check Amount",
  "Code", "Expected Amount", "Dif", "Check Principal", "Check Actual Interest", "Notes"
]

wb = xlsx_package.workbook

def display_currency(number)
  number_with_precision(number.try('/', 100.0), :precision => 2)
end

wb.add_worksheet(name: "Buttons") do |sheet|
  currency = sheet.styles.add_style(:format_code=>"$#,###.00;[Red]$-#,###.00",
                          :border=>Axlsx::STYLE_THIN_BORDER)
  header = info_header
  header_styles = [
    nil, nil, nil, nil, nil, nil, nil,
    nil, nil, nil, nil, nil,
    nil, nil, nil, nil, currency,
    currency, nil, nil, currency, nil, currency,
    currency, nil,
    currency, nil, currency, currency, currency, currency
  ]

  header = header.concat sub_sum_header
  header_styles.concat [
    currency, currency,
    currency, currency, currency, currency, currency
  ]

  (0..max_number_subs).each do | i|
    header = header.concat sub_header
    header_styles.concat [nil, nil, currency, currency, currency, nil, currency, nil]
  end


  sheet.add_row header

  @liens.each do |lien|
    township = lien.township.name
    owner = lien.llcs[0].name
    receipts = lien.receipts
    subs = lien.subsequents
    if lien.redemption_date.nil?
      lien.redemption_date = @redemption_date
    end

    mua_account = lien.mua_accounts[0].account_number
    recording_fee = 0
    if !lien.recording_date.nil? and lien.recording_date > @start_date and lien.recording_date < @end_date
      recording_fee = lien.recording_fee
    end
    row = [
      lien.id, township, lien.year, owner, lien.block_lot, lien.block, lien.lot,
      lien.qualifier, lien.adv_number, mua_account, lien.cert_number, lien.lien_type,
      lien.list_item, lien.id, lien.longitude, lien.latitude, lien.assessed_value.try('/', 100),
      lien.tax_amount.try('/', 100), lien.status, lien.address, lien.cert_fv.try('/', 100), lien.winning_bid, lien.premium.try('/', 100),
      lien.total_cash_out_calc().try('/', 100), lien.sale_date,
      recording_fee.try('/', 100), lien.recording_date, lien.search_fee.try('/', 100), 0, lien.flat_rate.try('/', 100), lien.cert_interest.try('/', 100)
    ]

    last_sub = nil
    lien.subsequents.each do |sub|
      if sub.sub_date.nil? or sub.void
        next
      end
      if (sub.sub_date < @start_date or sub.sub_date > @end_date)
        next
      end
      if last_sub.nil?
        last_sub = sub.sub_date
      elsif sub.sub_date > last_sub
        last_sub = sub.sub_date
      end
    end

    row.concat [
      lien.total_subs_before_sub(nil, @start_date, @end_date).try('/', 100),
      lien.total_cash_out_calc(@effective_date).try('/', 100),
      lien.total_check_calc().try('/', 100), lien.total_principal_paid(@effective_date).try('/', 100),
      lien.total_actual_interest(@effective_date).try('/', 100), lien.total_legal_paid_calc(@effective_date).try('/', 100), lien.principal_balance(@effective_date).try('/',100)
    ]

    lien.subsequents.each do |sub|
      row.concat [
        sub.sub_type, sub.sub_date, sub.interest.try('/', 100), sub.interest_eight.try('/', 100), sub.interest_eighteen.try('/', 100),
        "", sub.amount_calc.try('/', 100), sub.text_pad
      ]
    end

    sheet.add_row row, :style => header_styles
  end

  puts max_number_receipt
end
